// <auto-generated />
using System;
using Dorywcza.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Dorywcza.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Dorywcza.Models.Auth.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            FirstName = "admin",
                            LastName = "admin",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("Dorywcza.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeOfJob")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Workplace")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            TypeOfJob = "Prace budowlane",
                            Workplace = "Katowice"
                        },
                        new
                        {
                            CategoryId = 2,
                            TypeOfJob = "Prace biurowe",
                            Workplace = "Katowice"
                        },
                        new
                        {
                            CategoryId = 3,
                            TypeOfJob = "Prace transportowe",
                            Workplace = "Katowice"
                        },
                        new
                        {
                            CategoryId = 4,
                            TypeOfJob = "Opieka",
                            Workplace = "Katowice"
                        });
                });

            modelBuilder.Entity("Dorywcza.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<bool>("AgreementRodo")
                        .HasColumnType("bit");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(4000)")
                        .HasMaxLength(4000);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Experience")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qualification")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            Age = 22,
                            AgreementRodo = true,
                            Comment = "Czy jest przerwa na piwo?",
                            Email = "example@example",
                            Experience = "3 lata na budowie",
                            Gender = "M",
                            Name = "Jan Kowalski",
                            Phone = "+48 000 000 000",
                            Qualification = "Certyfikat QWERTY, Ukończone technikum budowlane"
                        });
                });

            modelBuilder.Entity("Dorywcza.Models.Employer", b =>
                {
                    b.Property<int>("EmployerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EmployerId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Employers");

                    b.HasData(
                        new
                        {
                            EmployerId = 1,
                            CompanyName = "ConstructNext",
                            Description = "Zajmujemy się budową obiektów różnego przeznaczenia",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Dorywcza.Models.JobOffer", b =>
                {
                    b.Property<int>("JobOfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AmountOfPlaces")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("QualificationIsRequired")
                        .HasColumnType("bit");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<string>("TimeFrame")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobOfferId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EmployerId");

                    b.ToTable("JobOffers");

                    b.HasData(
                        new
                        {
                            JobOfferId = 1,
                            AddDate = new DateTime(2020, 1, 16, 0, 0, 0, 0, DateTimeKind.Local),
                            AmountOfPlaces = 1,
                            CategoryId = 1,
                            Description = "Praca na budowie sklepu spożywczego w 5-osobowym zespole",
                            EmployerId = 1,
                            Name = "Praca budowlana na Zawodziu",
                            QualificationIsRequired = false,
                            Salary = 6000m,
                            State = true,
                            TimeFrame = "12.12.2019 - 14.12.2019"
                        });
                });

            modelBuilder.Entity("Dorywcza.Models.JobOfferEmployee", b =>
                {
                    b.Property<int>("JobOfferId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("JobOfferId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("JobOfferEmployees");

                    b.HasData(
                        new
                        {
                            JobOfferId = 1,
                            EmployeeId = 1
                        });
                });

            modelBuilder.Entity("Dorywcza.Models.Employer", b =>
                {
                    b.HasOne("Dorywcza.Models.Auth.User", null)
                        .WithOne("Employer")
                        .HasForeignKey("Dorywcza.Models.Employer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dorywcza.Models.JobOffer", b =>
                {
                    b.HasOne("Dorywcza.Models.Category", "Category")
                        .WithMany("JobOffers")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dorywcza.Models.Employer", "Employer")
                        .WithMany("JobOffers")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dorywcza.Models.JobOfferEmployee", b =>
                {
                    b.HasOne("Dorywcza.Models.Employee", "Employee")
                        .WithMany("JobOfferEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dorywcza.Models.JobOffer", "JobOffer")
                        .WithMany("JobOfferEmployees")
                        .HasForeignKey("JobOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
